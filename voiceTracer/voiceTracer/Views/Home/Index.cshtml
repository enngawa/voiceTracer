@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center" id="main_content">
    <div class="container" id="chat_content">
    </div>
</div>

<hr />

<script>
    window.addEventListener('DOMContentLoaded', function () {

        //音声認識設定
        SpeechRecognition = webkitSpeechRecognition || SpeechRecognition;
        let recognition = new SpeechRecognition();

        recognition.lang = 'ja-JP';//日本語
        recognition.interimResults = true;//認識しながら変換
        recognition.continuous = true;//認識を中断しない


        let speak_hash = getUniqueStr();//発言固有のID
        let user_name = localStorage.getItem('user_name') === null ? "Unknown" : localStorage.getItem('user_name');//表示するユーザ名
        $("#input_name").val(user_name);

        let user_hash = getUniqueStr();//ユーザ固有ID
        let group_hash = location.hash == "" ? "公開グループ" : decodeURI(location.hash.substring(1));//グループ名
        $("#group_name").text(group_hash);


        //一番下までスクロールされていたらオートスクロールを有効にする
        let autoscroll_flg = true;//自動スクロール
        $(window).on('scroll', function () {
            var doch = $(document).innerHeight(); //ページ全体の高さ
            var winh = $(window).innerHeight(); //ウィンドウの高さ
            var bottom = doch - winh; //ページ全体の高さ - ウィンドウの高さ = ページの最下部位置
            if (bottom <= $(window).scrollTop()) {
                //一番下までスクロールした時に実行
                autoscroll_flg = true;
            } else {
                autoscroll_flg = false;
            }
        });

        //会議室を開く
        $("div.modal-footer").on("click", function () {
            var win = window.open(location.protocol +"//" +location.hostname + "/#" + $("#title").val(), '_blank');
            if (win) {
                //Browser has allowed it to be opened
                win.focus();
            } else {
                //Browser has blocked it
                alert('ポップアップブロックを解除してください。');
            }
        });

        //削除
        $(document).on("click", "button.del-button", async (e) => {
            var box = $(e.target).closest("div.say");
            $(box).remove();
        });

        //編集キャンセル
        $(document).on("click", "button.cancel-button", async (e) => {
            var box = $(e.target).closest("div.say");
            $(".message_content", box).show();
            $(box).removeClass("edit-say");
            $("div.input-group", box).remove();
        });

        //編集保存
        $(document).on("click", "button.save-button", async (e) => {
            var box = $(e.target).closest("div.say");
            await connection.invoke("FixGroupMessage", group_hash, $("input.username", box).val(), $("span.name", box).data("hash"), $("textarea", box).val(), $(box).data("hash"), $("span.datetime", box).text(), "fa-edit");

            $(".message_content", box).show();
            $(box).removeClass("edit-say");
            $("div.input-group", box).remove();
        });

        //編集機能
        $(document).on("click", "div.say:not(.edit-say)", function () {
            $(this).addClass("edit-say");
            $(".message_content", this).hide();
            $(this).append(`<div class="input-group"><textarea class="form-control form-control-sm"></textarea></div>`);
            $("textarea", this).val($("p.message-content", this).text());
            $(this).append(`<div class="input-group"><div class="input-group-prepend"><span class="input-group-text">ユーザ名</span></div><input type="text" class="form-control form-control-sm username"></div>`);
            $("input.username", this).val($("span.name", this).text());
            $(this).append(`<div class="input-group"><div class="text-right"><button type="button" class="btn btn-danger del-button" ><i class="fas fa-trash-alt"></i>削除する</button><button type="button" class="btn btn-secondary cancel-button" ><i class="fas fa-undo-alt"></i>キャンセル</button><button type="button" class="btn btn-primary save-button" ><i class="fas fa-save"></i>保存する</button></div></div>`);

        });

        //CSV出力
        $("#output").on("click", function () {
            var array_data = [["日時", "氏名", "発言内容"]]
            $("div.say", "div#chat_content").each(function (i) {

                array_data[i + 1] = [$("span.datetime", jQuery(this))[0].innerHTML, $("span.name", jQuery(this))[0].innerHTML, $("p.message-content", jQuery(this))[0].innerHTML];
            });

            console.log(array_data);


            // BOM の用意（文字化け対策）
            var bom = new Uint8Array([0xEF, 0xBB, 0xBF]);

            // CSV データの用意
            var csv_data = array_data.map(function (l) { return l.join(',') }).join('\r\n');

            var blob = new Blob([bom, csv_data], { type: 'text/csv' });

            var url = (window.URL || window.webkitURL).createObjectURL(blob);

            var a = document.getElementById('downloader');
            a.download = formatDate(new Date(), "yyyyMMddHHmm") + "_" + group_hash + ".csv";
            a.href = url;

            // ダウンロードリンクをクリックする
            $('#downloader')[0].click();
        });

        //音声認識スタート・停止
        $("#connect").on("click", async () => {
            if ($("#connect").hasClass("btn-primary")) {
                user_name = $("#input_name").val();
                try {
                    $("#vc_btntext").text("Loading...");
                    $("#connect").removeClass("btn-primary");
                    recognition.start();
                    console.log("recognition Started.");

                } catch (e) {
                    console.log(e.message);
                    $("#connect").removeClass("btn-danger").addClass("btn-primary");
                    $("#vc_btntext").text("エラー");
                }
            } else {
                recognition.stop();
                $("#connect").removeClass("btn-danger").addClass("btn-primary");
            }
        });


        //名前変更
        $("#input_name").on("change", async () => {
            await connection.invoke("ChangeName", user_name, $("#input_name").val(), group_hash);

            localStorage.setItem('user_name', $("#input_name").val());
            user_name = $("#input_name").val();
        });

        //手動送信
        $("#send_self").on("click", async () => {
            await connection.invoke("SendGroupMessage", group_hash, user_name, user_hash, $("#result").val(), speak_hash, formatDate(new Date(), "yyyy/MM/dd HH:mm:ss"), "fa-keyboard");
            speak_hash = getUniqueStr();
            $("#result").val("");
        });

        //開始
        recognition.onstart = async () => {
            $("#connect").removeClass("btn-primary").addClass("btn-danger");
            $("#vc_btntext").text("音声認識作動中");
        };


        //認識開始時
        recognition.onsoundstart = async () => {
            $("#connect").removeClass("btn-primary").addClass("btn-danger");
            $("#vc_btntext").text("音声認識作動中");
        };

        //音声認識不明瞭
        recognition.onnomatch = async () => {
            $("#connect").removeClass("btn-danger").addClass("btn-primary");
            $("#vc_btntext").text("音声が不明瞭です");
            $("#disable_mic")[0].play();

        };

        //音声認識エラー
        recognition.onerror = async (e) => {
            $("#connect").removeClass("btn-danger").addClass("btn-primary");
            $("#vc_btntext").text("音声認識を有効にする");
            $("#disable_mic")[0].play();
        };

        //音声認識停止
        recognition.onsoundend = async () => {
            $("#connect").removeClass("btn-danger").addClass("btn-primary");
            $("#vc_btntext").text("音声認識を有効にする");
            $("#disable_mic")[0].play();
        };

        //音声認識イベント
        recognition.onresult = async (event) => {
            let transcript = event.results[event.results.length - 1][0].transcript;

            //データが確定しているか？
            if (event.results[event.results.length - 1].isFinal) {
                console.log(transcript);
                //完了
                try {
                    //送信実行
                    await connection.invoke("SendGroupMessage", group_hash, user_name, user_hash, transcript, speak_hash, formatDate(new Date(), "yyyy/MM/dd HH:mm:ss"), "fa-microphone");
                    speak_hash = getUniqueStr();
                    $("#result").html("");
                    version_count = 0;
                } catch (err) {
                    console.error(err);
                }
            } else {
                //途中
                $("#result").html(transcript);
                try {
                    await connection.invoke("SendGroupMessage", group_hash, user_name, user_hash, transcript, speak_hash, formatDate(new Date(), "yyyy/MM/dd HH:mm:ss"), "fa-microphone");
                } catch (err) {
                    console.error(err);
                }
            }

        };

        //サーバ接続設定
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        //システムメッセージ
        connection.on("SystemMessage", (message, datetime) => {
            $("#chat_content").append(`<div class="message-info"><p class="message-content">${message}(${datetime})</p></div>`);

            if (autoscroll_flg) {
                //最下部までスクロール
                var element = document.documentElement;
                var bottom = element.scrollHeight - element.clientHeight;
                window.scroll(0, bottom);
            }
        });

        //受信イベント
        connection.on("ReceiveMessage", (user, _user_hash, message, hash, datetime, type) => {
            mergeMessage(user, _user_hash, message, hash, datetime, type);
        });
        //修正イベント
        connection.on("FixMessage", (user, _user_hash, message, hash, datetime, type) => {
            var rev = $(`div[data-hash="${hash}"]`);
            if (rev.length > 0) {
                mergeMessage(user, _user_hash, message, hash, datetime, type);
            }
        });

        //データの修正を受信
        function mergeMessage(user, _user_hash, message, hash, datetime, type) {
            var rev = $(`div[data-hash="${hash}"]`);
            var color = user_hash == _user_hash ? "message-orange" : "message-blue";//自分 or 他人のデータ


            if (rev.length > 0) {
                //書き込み途中のデータなら編集
                $(".message-content", rev).text(message);
                $("span.name", rev).text(user);
                $("i.fas", rev).attr('class', `fas ${type}`);
            } else {
                //新規データ
                $("#chat_content").append(`<div class="${color} say" data-hash="${hash}"><div class="message_content"><p class="message-content">${message}</p><div class="message-timestamp-right"><i class="fas ${type}"></i><span class="name" data-hash="${user_hash}">${user}</span>(<span class="datetime">${datetime}</span>)</div></div></div>`);
            }

            if (autoscroll_flg) {
                //最下部までスクロール
                var element = document.documentElement;
                var bottom = element.scrollHeight - element.clientHeight;
                window.scroll(0, bottom);
            }
        }


        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
                await connection.invoke("Join", user_name, group_hash);
                console.log("groupに参加: " + group_hash);
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        function getUniqueStr(myStrong) {
            var strong = 1000;
            if (myStrong) strong = myStrong;
            return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16)
        }

        function formatDate(date, format) {
            format = format.replace(/yyyy/g, date.getFullYear());
            format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));
            format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));
            format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));
            format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));
            format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));
            format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));
            return format;
        };

        window.addEventListener("beforeunload", async (e) => {
            //await connection.invoke("SendMessage", "system", "system", `${user_name}が切断しました。`, "info", formatDate(new Date(), "yyyy/MM/dd HH:mm:ss"));
            await connection.invoke("Leave", user_name, group_hash);
        }, false);

        start();


    });


</script>
<style type="text/css">
    input#title {
        padding: 0;
    }

    div.say.edit-say > div.input-group {
        padding-top: 5px;
        padding-bottom: 5px;
    }

    button.del-button {
        margin-right: 25px;
    }

    button.cancel-button {
        margin-right: 5px;
    }

    body {
        font-family: "Segoe UI","Helvetica Neue", "游ゴシック Medium", "Yu Gothic","Hiragino Kaku Gothic ProN";
    }

    div.say i.fas::before {
        display: inline-block;
        transform: scaleX(-1);
    }


    .box-anchor {
        text-decoration: none;
    }

    .nav-link {
        padding-top: 0;
        padding-bottom: 0;
    }

    nav.navbar {
        padding-top: 0;
        padding-bottom: 2px;
        margin-bottom: 0;
    }

    li > button.box-anchor {
        border-width: 0px;
        background-color: white;
    }

    .box {
        width: 100px;
        text-align: center;
        border-radius: 10px;
        border-width: 1px;
        padding: 5px 0;
        margin: 0;
        font-weight: bold;
    }

        .box:hover,div.modal-footer:hover {
            background-color:whitesmoke;
        }

    span#group_name {
        text-align: left;
        font-weight: bold;
    }

    div#chat_content {
        margin-top: 50px;
        margin-bottom: 50px;
    }

    nav > div.container {
        padding-top: 0;
        padding-bottom: 0;
    }

    button > i.fas {
        padding-left: 3px;
        padding-right: 5px;
    }

    .main_input {
        width: 100%;
        height: 100px;
    }

    .container {
        width: 600px;
        padding: 10px;
    }

    span.name {
        padding-right: 5px;
        padding-left: 5px;
    }

    .message-info {
        position: relative;
        padding: 10px;
        width: 600px;
        height: auto;
        text-align: center;
        font: 400 .9em 'Open Sans', sans-serif;
        border-bottom: 1px;
        border-top: 1px;
    }

    .message-blue {
        position: relative;
        margin-left: 20px;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #A8DDFD;
        width: 400px;
        height: auto;
        text-align: left;
        font: 400 .9em 'Open Sans', sans-serif;
        border: 1px solid #97C6E3;
        border-radius: 10px;
    }

    .message-orange {
        position: relative;
        margin-bottom: 10px;
        margin-left: calc(100% - 440px);
        padding: 10px;
        background-color: #f8e896;
        width: 400px;
        height: auto;
        text-align: left;
        font: 400 .9em 'Open Sans', sans-serif;
        border: 1px solid #dfd087;
        border-radius: 10px;
    }

    .message-content {
        padding: 0;
        margin: 0;
    }

    .message-timestamp-right {
        position: static;
        font-size: .85em;
        font-weight: 300;
        bottom: 5px;
        right: 5px;
        text-align: right;
    }

    .message-timestamp-left {
        position: static;
        font-size: .85em;
        font-weight: 300;
        bottom: 5px;
        left: 5px;
    }

    .message-blue:after {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-top: 15px solid #A8DDFD;
        border-left: 15px solid transparent;
        border-right: 15px solid transparent;
        top: 0;
        left: -15px;
    }

    .message-blue:before {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-top: 17px solid #97C6E3;
        border-left: 16px solid transparent;
        border-right: 16px solid transparent;
        top: -1px;
        left: -17px;
    }

    .message-orange:after {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-bottom: 15px solid #f8e896;
        border-left: 15px solid transparent;
        border-right: 15px solid transparent;
        bottom: 0;
        right: -15px;
    }

    .message-orange:before {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-bottom: 17px solid #dfd087;
        border-left: 16px solid transparent;
        border-right: 16px solid transparent;
        bottom: -1px;
        right: -17px;
    }

    *, ::after, ::before {
        box-sizing: content-box;
    }
</style>


@*<script>

        document.addEventListener("DOMContentLoaded", () => {


            //接続設定
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            //受信時
            connection.on("ReceiveMessage", (user, message) => {
                const li = document.createElement("li");
                li.textContent = `${user}: ${message}`;
                document.getElementById("messageList").appendChild(li);
            });

            //送信時
            document.getElementById("send").addEventListener("click", async () => {
                const user = document.getElementById("user").value;
                const message = document.getElementById("message").value;

                //送信実行
                try {
                    await connection.invoke("SendMessage", user, message);
                } catch (err) {
                    console.error(err);
                }
            });

            //接続開始
            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    recognition.start();
                    console.log("recognition Connected.");
                } catch (err) {
                    console.log(err);
                    setTimeout(start, 5000);
                }
            };

            async function close() {
                try {
                    await connection.close();
                } catch (err){
                    console.log(err);
                    setTimeout(start, 5000);
                }
            }

            connection.onclose(start);

            // Start the connection.
            start();
        });





        //ロード時に対応しているブラウザか確認する。
        window.onload = function () {
            if ('SpeechRecognition' in window) {
                // ユーザのブラウザは音声合成に対応しています。

            } else {
                // ユーザのブラウザは音声合成に対応していません。

            }
        };

        const startBtn = document.querySelector('#start-btn');
        const stopBtn = document.querySelector('#stop-btn');
        const resultDiv = document.querySelector('#result-div');

        SpeechRecognition = webkitSpeechRecognition || SpeechRecognition;
        let recognition = new SpeechRecognition();

        recognition.lang = 'ja-JP';
        recognition.interimResults = true;
        recognition.continuous = true;

        let finalTranscript = ''; // 確定した(黒の)認識結果

        recognition.onresult = (event) => {
            let interimTranscript = ''; // 暫定(灰色)の認識結果

            for (let i = event.resultIndex; i < event.results.length; i++) {
                let transcript = event.results[i][0].transcript;

                console.log(transcript);

                //データが確定しているか？
                if (event.results[i].isFinal) {
                    //完了
                    finalTranscript += transcript;
                } else {
                    //途中
                    interimTranscript = transcript;
                }
            }
            resultDiv.innerHTML = finalTranscript + '<i style="color:#ddd;">' + interimTranscript + '</i>';

            const user = document.getElementById("user").value;
            const message = resultDiv.innerHTML;

            //送信実行
            try {
                await connection.invoke("SendMessage", user, message);
            } catch (err) {
                console.error(err);
            }
        }

        startBtn.onclick = () => {
            recognition.start();
        }
        stopBtn.onclick = () => {
            recognition.stop();
        }
    </script>*@
